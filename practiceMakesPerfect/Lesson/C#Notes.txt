using System;
namespace practiceMakesPerfect.Lesson
{
 public class C_
 {
     public C_()
     {

      


      Console.ReadKey();

      Console.Writeline(); -  THIS IS USED TO PRINT SOMETHING TO THE SCREEN FOR USER, YOU CAN PUT ANYTHING IN THE CONSOLE WRITELINE
                              AS LONG AS YOU USE THE CORRECT DATA TYPE.

      Console.Readline();  -  THIS IS TELLING THE COMPUTER TO WAIT AND LET THE USER ENTER SOMETHING,THIS IS USED TO GET INFORMATION FROM
                              THE USER, EXAMPLE: IF I ASK THE USER TO INPUT THERE FIRST NAME
                              THE CONSOLE READLINE WILL ALLOW THE USER TO THEN INPUT THERE FIRST NAME, THAT WILL THEN BE RETURNED TO ME.

      Consol.Write();      -  
                   

      Console.Read();      _


      Console.Clear();     -  THIS IS USED TO CLEAR EVERTHING PREVEOUSLY OUTPUTTED AND INPUTTED BEFORE POINT OF USE,
                              ANYTHING THAT HAS BEEN PRINTED TO SCREEN BEFORE HAND WILL BE CLEARED.

      Console.ToLower      -  IF WE WANT THE USER TO ENTER SOMETHING INTO THE CONSOLE.READLINE BUT WE NEED IT TO BE CASE
                              SENSETIVE WE WOULD USE THE .ToLower,THIS WILL TURN ANY CASE OF LETTERS INTO ALL LOWERCASE LETTERS.

      SEMI COLON           -  COMPLETS A SENTANCE ,ITS BASICALLY PUTTING A FULLSTOP OR A QUESTION MARK AT THE END OF A STATEMENT, THE SEMI COLON
                              IS JUST THE C# WAY OF USEING A FULLSTOP.

      INDENTATION          -  LINES UP OUR CODE FOR BETTER READING PURPOSSES.

      Methods & Functions: -  A BLOCK OF CODE THAT HAS A NAME,A PIECE OF CODE THAT WE PACKAGE TOGETHER AND USE AS A METHOD FOR
                              A FUNCTUALITY THAT WE CAN USE MORE THEN 1 TIME, WE WILL USE A METHOD INSTEAD OF COPYING AND PASTING CODE,
                              THE METHOD IS CREATED MAINLY WITH THE PURPOSE THAT WE CAN RE-USE IT INSTEAD OF REWRITING THE SAME CODE OVER
                              AND OVER AGAIN OR COPY AND PASTING AGAIN AND AGAIN.A CLASS IS A CONTAINER FOR ALL OUR METHODS PROPERTIES AND FIELDS
                              FOR OUR APPLICATION ITS A WAY TO ORGANISE OUR APPLICATION. 

       Method Overload     -  WHEN WE HAVE THE SAME METHOD RETURN TYPE, SAME METHOD NAME BUT DIFFERENT ARGUMENTS IN THE PARAMETER
                              EXAMPLE: (STRING,STRING) (STRING), THIS WOULD BE OVERLOADING BECAUSE THEY WOULD HAVE THE SAME NAME
                              SAME METHOD BUT DIFFERENT ARGUMENTS IN THE PARAMETER AS ONE WOULD HAVE 2 STRINGS AND THE OTHER HAS 1

       METHOD OVERRIDING   -

                      

       REMAINDER:          -  EXAMPLE: Console.WriteLine(100% 29) WOULD PRINT 13, WE CHOOSE A PERCENTAGE THEN WE ADD A NUMBER
                              THEN WE ADD THE NUMBER THAT WE WANT TO USE, FROM THE EXAMPLE 29 WILL GO INTO 100% 3 TIMES BUT
                              WILL LEAVE A REMAINDER OF 13, 29 X 3 = 87 LEAVING A REMAINDER OF 13 THAT WILL BE PRINTED.
                              THIS METHOD IS JUST TRYING TO FIND OUT WHAT IS LEFT OVER.

       CLASSES             -  A CLASS IS SOMEWHERE WE USE TO MAKE FIELDS AND METHODS,WE CAN HAVE HUNDREDS OF DIFFERNET CLASS NAMES
                              DOING DIFFERENT THINGS,OBJECTS ARE THE COPY OF THE BLUEPRINT OR TEMPLATE OF A CLASS THAT HOLD DIFFERENT
                              VERIABALS METHODS,IF THE ACCESS MODIFIER IS SET TO PRIVATE THEN THAT METHOD OR VERIABLE CAN ONLY BE USED
                              IN THE CLASS IT WAS MADE IN,IF THE ACCESS MODIFIER IS SET TO PUBLIC THEN WE CAN TAKE THAT METHOD OR
                              VERIABLE AND USE IT IN ANOTHER CLASS,THE PROBLEM WITH THAT IS THE VALUES OF THE METHOD CAN BE CHANGED
                              WITH IN TURN CAN BUG THE ORIGINAL METHOD VALUES METHODS ARE PIECES OF CODE PUT TOGETHER FOR SHORTCUT
                              PURPOSSES TO STOP U FROM COPY AND PASTING CODE.

      CONSTRUCTORS         -  

      VERIABLES            -  A VERIABAL IS A BUCKET IN THE COMPUTERS MEMORY,IT ALLOWS US TO SET A VALUE TAKE A VALUE OR REPLACE ONE.

      CASSING              -  THERE ARE 3 MAIN TYPES OF CASSING.
                              - PASCAL CASSING = THE FIRST LETTER OF EVERY WORD MUST BE A CAPITAL LETTER
                              - CAMEL CASSING  = FIRST WORD STARTS WITH LOWERCASE, HAS NO CAPITAL, BUT EVERY WORD AFTER STARTS WITH A CAPITAL
                              - HUNGARIAN NOTATION = THIS WILL PUT LETTERS OF THE CLASS YOU ARE USING AT THE END.

      .NETFRAMWORK         -  BUILT UP OF DIFFERENT CLASSES AND RUNTIMES.
                              IN THE .NET FRAMEWORK WE HAVE CLASS LIBARIES, THIS IS PRE EXISTING CODE THAT HAS BEEN MADE BY MICROSOFT
                              THAT ALLOWS US TO MAKE APPLICATIONS EASIER,WE CAN USE THIS CODE FOR THINGS LIKE DATE AND TIME OR LENGTH AND MATHS
                              MICROSOFT HAVE ALREADY DONE ALL THE CODE TO MAKE THEM CLASSES READY FOR INSTANT USE

      RUNTIME              -  COMMON LANGUAGE RUNTIME (CLR) WRAPS AROUND OUR CODE AND PROTECTS IT, IT TAKES CARE OF THE LOW LEVEL DETAILSSO WE CAN FOCUS
                              ON WHAT WE NEED TO DO INSTEAD OF HOW THINGS ARE WORKING LIKE THE HARDWARE. IT ALSO CONVERTS OUR CODE INTO CLR
                              WHICH IS INTERMEDIATE AND THEN THAT IS CONVERTED INTO (BINARY) WHICH IS COMPUTER LANGUAGE, ITALSO PROTECTS THE USER SO THE
                              THE DEVELOPER CANT ACCESS THER DATA BASE.

      OBJECTS              -  IS BASICALLY A BLUEPRINT OR TEMPLATE OF A CLASS THAT HOLDS VERIABLES AND METHODS THAT WE CAN TAKE AND REUSE
                              WE CAN ONLY USE IT BY CALLING IT,TO DO THIS WE CALL THE NAME OF THE CLASSS IT IS IN THEN WE GIVE IT A NAME(veriable)
                              FOLLOWED BY THE EQUALS SIGN, AFTER THE EQUALS SIGN IS NEW THIS WHAT CREATES A NEW OBJECT, THIS IS VERY IMPORTANT
                              AS THIS IS THE ONLY WAY WE CAN HAVE ACCESS TO A CLASS AND ITS METHODS WITHOUT IT BEING STATIC,
                              ANYTHING THAT IS NOT STATIC YOU CAN ONLY GET ACCESS TO BY CREATING A OBJECT
                              THEN THE NAME OF THE CLASS AGAIN, THIS IS TELLING THE COMPUTER THAT WE WANT A NEW
                              TEMPLATE OF THIS CLASS.AT THE TOP OF THE CLASS WE MUST PUT USING THEN THE NAMESPACE OF THE CLASS THAT WE WANT
                              THE COMPUTER TO CHECK,IF WE DONT DO THIS THE COMPUTER DONT KNOW WHERE TO LOOK AS WE WILL HAVE LOADS OF DIFFERENT
                              CLASSES WITH DIFFERENT NAMES.WHEN WE WANT TO USE THE OBJECT WE USE THE NEW NAME THAT WE CALLED THEN A DOT(ACCESS MEMBER)
                              THEN THE NAME OF THE ORIGINAL METHOD,THIS IS FINISHED WITH PERENTHASEE BRACKETS () THEN A C# FULLSTOP ; WITH IS A SEMI COLON
                              NOW WE HAVE INITALIZED IT.

      FIELDS & PROPERTIES  -  ONE OF THE MAIN REASONS FOR PROPERTIES IS SO WE CAN HAVE MORE CONTROL OVER OUR FEILDS,IF EVER WE HAVE A FEILD THAT IS EXPOSED
                              WE WOULD PUT THAT IN A PROPERTY AS A MAIN RULE IN PROGRAMMING IS NOT HAVE FEILDS/VERIABALS EXPOSED. A PROPERTY IS A FEILD ON
                              STERIODS AND ALSO ACTS LIKE A METHOD, IT GIVES US CONTROL OVER WHAT CAN BE ACCESSED AND CHANGED FROM OUTSIDE A CLASS.
                              A PROPERTY ALLOWS US TO GET A FEILD AND SET IT OR GET IT AND NOT SET IT WHERE A FEILD ONLY ALLOWS US TO GET IT AND SET IT FROM
                              OUTSIDE A CLASS IF IT IS SET TO PUBLIC,IF THE FIELD IS SET TO PRIVATE WE CAN NOT GET OR SET FROM OUTSIDE THE CLASS.
                        
      RANDOM.NEXT          -  RANDOM.NEXT THIS IS WHERE WE GO TO IF WE NEED A RANDOM NUMBER  var random = new Random(); THIS DECLARES THAT WE WANT A NEW RANDOM
                              NUMBER AND HAVE CALLED IT random,
                              var randomNumber = random.Next(); THIS IS CALLING THAT WE WANT A NEW NUMBER AND WE WANT IT STORED, IF WE LEAVE THE BRACKETS EMPTY
                              WE ARE STATING THAT WE HAVE NO CONDITIONS ON WHAT NUMBER IT GIVES,IF WE WAS TO PUT FOR EXAMPLE (0,100) THAT IS STATING THAT WE
                              WANT A RANDOM NUMBER BETWEEN ZERO AND ONE HUNDRED,IF WE WANTED OUR RANDOM NUMBER PRINTED WE WOULD HAVE TO ENTER randomNumber
                              INTO THE CONSOLE.WRITELINE BECAUSE THAT IS THE NAME WE HAVE GIVEN OUR RANDOM NUMBER.

 }


 }
}
