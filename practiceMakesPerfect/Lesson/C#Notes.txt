using System;
namespace practiceMakesPerfect.Lesson
{
 public class C_
 {
     public C_()
     {

      Console.ReadKey();

      Console.Writeline(); -  THIS IS USED TO PRINT SOMETHING TO THE SCREEN FOR USER, YOU CAN PUT ANYTHING IN THE CONSOLE WRITELINE
                              AS LONG AS YOU USE THE CORRECT DATA TYPE.

      Console.Readline();  -  THIS IS TELLING THE COMPUTER TO WAIT AND LET THE USER ENTER SOMETHING,THIS IS USED TO GET INFORMATION FROM
                              THE USER, EXAMPLE: IF I ASK THE USER TO INPUT THERE FIRST NAME
                              THE CONSOLE READLINE WILL ALLOW THE USER TO THEN INPUT THERE FIRST NAME, THAT WILL THEN BE RETURNED TO ME.

      Consol.Write();      -  
                   

      Console.Read();      _


      Console.Clear();     -  THIS IS USED TO CLEAR EVERTHING PREVEOUSLY OUTPUTTED AND INPUTTED BEFORE POINT OF USE,
                              ANYTHING THAT HAS BEEN PRINTED TO SCREEN BEFORE HAND WILL BE CLEARED.

      Console.ToLower      -  IF WE WANT THE USER TO ENTER SOMETHING INTO THE CONSOLE.READLINE BUT WE NEED IT TO BE CASE
                              SENSETIVE WE WOULD USE THE .ToLower,THIS WILL TURN ANY CASE OF LETTERS INTO ALL LOWERCASE LETTERS.

      SEMI COLON           -  COMPLETS A SENTANCE ,ITS BASICALLY PUTTING A FULLSTOP OR A QUESTION MARK AT THE END OF A STATEMENT, THE SEMI COLON
                              IS JUST THE C# WAY OF USEING A FULLSTOP.

      INDENTATION          -  LINES UP OUR CODE FOR BETTER READING PURPOSSES.

      VALUE                -  THE VALUE IN C# IS THE DATA WE ARE USING AND WHAT WE WANT TO DO WITH IT.

      MEMBER ACCESSER      -  MEMBER ACCESSER ALLOWS YOU TO TO ACCESS PROPERTIES OF A OBJECT BY SPECIFING THE NAME OF THE OBJECT FOLLOWED BY A DOT.
                              IN OTHER CODE LANGUAGE THE MEMBER ACCESSER IS KNOWN AS THE .NOTATION,

      METHODS & FUNCTIONS  -  A BLOCK OF CODE THAT HAS A NAME,A PIECE OF CODE THAT WE PACKAGE TOGETHER AND USE AS A METHOD FOR
                              A FUNCTUALITY THAT WE CAN USE MORE THEN 1 TIME, WE WILL USE A METHOD INSTEAD OF COPYING AND PASTING CODE,
                              THE METHOD IS CREATED MAINLY WITH THE PURPOSE THAT WE CAN RE-USE IT INSTEAD OF REWRITING THE SAME CODE OVER
                              AND OVER AGAIN OR COPY AND PASTING AGAIN AND AGAIN.A CLASS IS A CONTAINER FOR ALL OUR METHODS PROPERTIES AND FIELDS
                              FOR OUR APPLICATION ITS A WAY TO ORGANISE OUR APPLICATION. 

       METHOD OVERLOADING  -  WHEN WE HAVE THE SAME METHOD RETURN TYPE, SAME METHOD NAME BUT DIFFERENT ARGUMENTS IN THE PARAMETER
                              EXAMPLE: (STRING,STRING) (STRING), THIS WOULD BE OVERLOADING BECAUSE THEY WOULD HAVE THE SAME NAME
                              SAME METHOD BUT DIFFERENT ARGUMENTS IN THE PARAMETER AS ONE WOULD HAVE 2 STRINGS AND THE OTHER HAS 1

       METHOD OVERRIDING   -

                      

       REMAINDER:          -  EXAMPLE: Console.WriteLine(100% 29) WOULD PRINT 13, WE CHOOSE A PERCENTAGE THEN WE ADD A NUMBER
                              THEN WE ADD THE NUMBER THAT WE WANT TO USE, FROM THE EXAMPLE 29 WILL GO INTO 100% 3 TIMES BUT
                              WILL LEAVE A REMAINDER OF 13, 29 X 3 = 87 LEAVING A REMAINDER OF 13 THAT WILL BE PRINTED.
                              THIS METHOD IS JUST TRYING TO FIND OUT WHAT IS LEFT OVER.

       CLASSES             -  A CLASS IS SOMEWHERE WE USE TO MAKE FIELDS PROPERTIES AND METHODS,WE CAN HAVE HUNDREDS OF DIFFERNET CLASS NAMES
                              THAT ARE DOING DIFFERENT THINGS,OBJECTS ARE THE COPY OF THE BLUEPRINT OR TEMPLATE OF A CLASS THAT HOLD DIFFERENT
                              FEILDS AND METHODS,IF THE ACCESS MODIFIER IS SET TO PRIVATE THEN THAT METHOD OR FEILD CAN ONLY BE USED
                              IN THE CLASS IT WAS MADE IN,IF THE ACCESS MODIFIER IS SET TO PUBLIC THEN WE CAN TAKE THAT METHOD OR
                              FEILD AND USE IT IN ANOTHER CLASS,THE PROBLEM WITH THAT IS THE VALUES OF THE METHOD OR FIELD CAN BE CHANGED
                              WITCH IN TURN CAN BUG OUR PROGRAMME, METHODS ARE PIECES OF CODE PUT TOGETHER FOR SHORTCUT
                              PURPOSSES TO STOP U FROM COPY AND PASTING CODE.

      CONSTRUCTORS         -  A CONSTRUCTOR IS A METHOD THAT IS CALLED WHEN THE INSTANCE OF A CLASS IS CREATED OR THE BLUEPRINT OF A CLASS
                              WHICH IS CALLED A OBJECT IS USED, THE CONSTRUCTOR PUTS A OBJECT IN AN EARLY STATE TO INITIALIZE SOME OF THE FEILDS OF
                              OF A CLASS, A CONSTUCTOR ALWAYS HAS THE SAME NAME AS THE CLASS NAME, IF THE NAMES ARE DIFFERENT IT WILL NOT BE RECONISED
                              AS A CONSTRUCTOR, A CONSTRUCTOR DOES NOT HAVE A RETURN TYPE LIKE A METHOD.AFTER THE NAME OF THE CONSTRUCTOR IS THE PARENTHSIS BRACKETS
                              () IF WE DONT PUT SOMETHING INTO THE ()BRACKETS .NET WILL SET THIS BY DEFAULT, .NET WILL INIITALIZE THE FIELDS OF THE CLASS
                              TO THERE DEFAULT VALUES, EXAMPLE: NUMBERS WILL BE SET TO ZERO, BOOL WILL BE SET TO FALSE AND ANYOTHER STRING OR OBJECT WILL BE
                              SET TO NULL AND A CHAR WILL BE EMPTY, this. IS A KEYWORD THAT REFERENCES THE CURRENT OBJECT, ctor IS A QUICK WAY TO WRITE A CONSTRUCTOR.

CONSTRUCTOR OVERLOADING    -  CONSTRUCTOR OVERLOADING IS WHEN WE HAVE A METHOD WITH THE SAME NAME BUT WITH DIFFERENT SIGNITURES, THE SIGNUTURE IS WHAT IDENTIFIES
                              A METHOD, EXAMPLE: RETURN TYPE, ITS NAME, ITS NUMBERS, WE CAN NOT HAVE TWO CONSTRUCTORS WITH THE SAME SIGNUTURE IT WILL NOT BE ALLOWED
                              OVERLOADING MAKES IT EASY TO INITIALIZE DEPENDING ON OUR NEEDS, EXAMPLE: WE MAY ONLY NEED A NAME, OR WE MAY NEED A NAME AND AGE,
                              OR WE MAY NOT WANT TO INITIALIZE NOTHING.

      VERIABLES            -  A VERIABAL IS A BUCKET IN THE COMPUTERS MEMORY,IT ALLOWS US TO SET A VALUE TAKE A VALUE OR REPLACE ONE.

      CASSING              -  THERE ARE 3 MAIN TYPES OF CASSING.
                              - PASCAL CASSING = THE FIRST LETTER OF EVERY WORD MUST BE A CAPITAL LETTER
                              - CAMEL CASSING  = FIRST WORD STARTS WITH LOWERCASE, HAS NO CAPITAL, BUT EVERY WORD AFTER STARTS WITH A CAPITAL
                              - HUNGARIAN NOTATION = THIS WILL PUT LETTERS OF THE CLASS YOU ARE USING AT THE END.

      .NETFRAMWORK         -  BUILT UP OF DIFFERENT CLASSES AND RUNTIMES.
                              IN THE .NET FRAMEWORK WE HAVE CLASS LIBARIES, THIS IS PRE EXISTING CODE THAT HAS BEEN MADE BY MICROSOFT
                              THAT ALLOWS US TO MAKE APPLICATIONS EASIER,WE CAN USE THIS CODE FOR THINGS LIKE DATE AND TIME OR LENGTH AND MATHS
                              MICROSOFT HAVE ALREADY DONE ALL THE CODE TO MAKE THEM CLASSES READY FOR INSTANT USE

      RUNTIME              -  COMMON LANGUAGE RUNTIME (CLR) WRAPS AROUND OUR CODE AND PROTECTS IT, IT TAKES CARE OF THE LOW LEVEL DETAILS SO WE CAN FOCUS
                              ON WHAT WE NEED TO DO INSTEAD OF HOW THINGS ARE WORKING LIKE THE HARDWARE. IT ALSO CONVERTS OUR CODE INTO CLR
                              WHICH IS INTERMEDIATE AND THEN THAT IS CONVERTED INTO (BINARY) WHICH IS COMPUTER LANGUAGE, IT ALSO PROTECTS THE USER SO THE
                              THE DEVELOPER CANT ACCESS THER DATA BASE.

      OBJECTS              -  IS BASICALLY A BLUEPRINT OR TEMPLATE OF A CLASS THAT HOLDS FEILDS AND METHODS THAT WE CAN TAKE AND REUSE
                              WE CAN ONLY USE IT BY CALLING IT,TO DO THIS WE CALL THE NAME OF THE CLASSS IT IS IN THEN WE GIVE IT A NAME(veriable)
                              FOLLOWED BY THE EQUALS SIGN, AFTER THE EQUALS SIGN IS NEW THIS WHAT CREATES A NEW OBJECT, THIS IS VERY IMPORTANT
                              AS THIS IS THE ONLY WAY WE CAN HAVE ACCESS TO A CLASS AND ITS METHODS WITHOUT IT BEING STATIC,
                              ANYTHING THAT IS NOT STATIC YOU CAN ONLY GET ACCESS TO BY CREATING A OBJECT
                              THEN THE NAME OF THE CLASS AGAIN, THIS IS TELLING THE COMPUTER THAT WE WANT A NEW
                              TEMPLATE OF THIS CLASS.AT THE TOP OF THE CLASS WE MUST PUT USING THEN THE NAMESPACE OF THE CLASS THAT WE WANT
                              THE COMPUTER TO CHECK,IF WE DONT DO THIS THE COMPUTER DONT KNOW WHERE TO LOOK AS WE WILL HAVE LOADS OF DIFFERENT
                              CLASSES WITH DIFFERENT NAMES.WHEN WE WANT TO USE THE OBJECT WE USE THE NEW NAME THAT WE CALLED THEN A DOT(ACCESS MEMBER)
                              THEN THE NAME OF THE ORIGINAL METHOD,THIS IS FINISHED WITH PERENTHASEE BRACKETS () THEN A C# FULLSTOP ; WITCH IS A SEMI COLON
                              NOW WE HAVE INITALIZED IT.

   FIELDS & PROPERTIES     -  ONE OF THE MAIN REASONS FOR PROPERTIES IS SO WE CAN HAVE MORE CONTROL OVER OUR FEILDS,IF EVER WE HAVE A FEILD THAT IS EXPOSED
                              WE WOULD PUT THAT IN A PROPERTY AS A MAIN RULE IN PROGRAMMING IS NOT HAVE FEILDS/VERIABALS EXPOSED. A PROPERTY IS A FEILD ON
                              STERIODS AND ALSO ACTS LIKE A METHOD, IT GIVES US CONTROL OVER WHAT CAN BE ACCESSED AND CHANGED FROM OUTSIDE A CLASS.
                              A PROPERTY ALLOWS US TO GET A FEILD AND SET IT OR GET IT AND NOT SET IT WHERE A FEILD ONLY ALLOWS US TO GET IT AND SET IT FROM
                              OUTSIDE A CLASS IF IT IS SET TO PUBLIC,IF THE FIELD IS SET TO PRIVATE WE CAN NOT GET OR SET FROM OUTSIDE THE CLASS. prop code snippit
                              IF YOU TYPE PROP AND PRESS THE TAB KEY TWICE VISUAL STUDIOS WILL GENERATE THE STARTER CODE FOR A NEW PROPERTY YOU THEN USE THE TAB KEY
                              TO MOVE THROUGH EACH PART OF THE PROPERTY SO YOU CAN FILL IN WHAT YOU NEED, YOU CAN ONLY DO THIS IF YOU ARE USING BOTH THE GET AND SET
                              YOU CAN NOT DO THIS FOR JUST GET OR JUST SET AS IT WILL THROW A ERROR, THIS IS CALLED A AUTOMATIC PROPERTY. TO CALL A PROPERTY IN THE
                              APPLICATION YOU CALL THE NAMESPACE FOLLOWED BY ACCESS MEMBER/DOT NOTATION THEN THE NAME OF THE PROPERTY, IF WE ARE ADDING A VALUE
                              WE NEED THE EQUALS SIGN FOLLOWED BY OUR VALUE. 
                        
      RANDOM.NEXT          -  RANDOM.NEXT THIS IS WHERE WE GO TO IF WE NEED A RANDOM NUMBER  var random = new Random(); THIS DECLARES THAT WE WANT A NEW RANDOM
                              NUMBER AND HAVE CALLED IT random,
                              var randomNumber = random.Next(); THIS IS CALLING THAT WE WANT A NEW NUMBER AND WE WANT IT STORED, IF WE LEAVE THE BRACKETS EMPTY
                              WE ARE STATING THAT WE HAVE NO CONDITIONS ON WHAT NUMBER IT GIVES,IF WE WAS TO PUT FOR EXAMPLE (0,100) THAT IS STATING THAT WE
                              WANT A RANDOM NUMBER BETWEEN ZERO AND ONE HUNDRED,IF WE WANTED OUR RANDOM NUMBER PRINTED WE WOULD HAVE TO ENTER randomNumber
                              INTO THE CONSOLE.WRITELINE BECAUSE THAT IS THE NAME WE HAVE GIVEN OUR RANDOM NUMBER.

      DATA TYPES           -   ********************************************************
                               ***                   DATA TYPES                     ***
                               ********************************************************           
                                char = CHAR IS A SINGLE CHARACTER ''
                                       A CHAR GOES INSIDE THE SINGAL BRACKETS 'A'
                                string = ANYTHING ON THE KEYPAD IS A STRING " "
                                         " A STRING GOES INSIDE THE SPEECH MARKS "
                                bool = true or false A BOOL IS A TRUE OR FALSE STATEMENT          
                                int = IS A NUMBER, ANY NUMBER WITHOUT A DECIMAL POINT 
                                double = A DOUBLE IS A NUMBER WITH A DECIMAL POINT
                                > MEANS MORE THAN
                                < MEANS LESS THAN
                                == MEANS EQUALS TOO
                                { } THE BODY
                                { OPEN BODY
                                } CLOSE BODY

       GIT HUB              -  GITHUB IS A PLACE FOR US TO STORE ALL OF OUR FILES OF CODES,IT ALLOWS A GROUP/TEAM OF DEVELOPERS
                               TO ACCESS AND WORK ON THE SAME PROJECTS, IF FILES ARE SAVED IN THE LOCAL PART OF GIT THIS ALLOWS US
                               TO WORK ON THE PROGRAMME BUT CAN NOT BE ACCESSED BY ANYONE ELSE, LOCAL MEANS ITS STORED IN GIT BUT
                               CAN ONLY BE ACCESSED FROM THE LOCAL COMPUTER THAT YOU ARE USING, IN ORDER FOR OTHER PEOPLE ON OTHER COMPUTERS
                               TO ACCESS IT WE MUST PUSH IT TO THE MASTER, THIS ALLOWS ANYBODY WHO HAS ACCESS TO THE DEPOSITERY TO ACCESS
                               AND TAKE A COPY OF WHAT EVER HAS BEEN COMMITED.
                               ANY FILES THAT ARE NOT TRACKED WE CANNOT SEE THE CHANGES AND WE CANNOT COMMIT IT.
                               - GIT STATUS GIVES US THE STATUS OF ALL FILES THAT ARE NOT TRACKED
                               - GIT ADD PUTS FILES INTO THE LOCAL SO THEY CAN BE TRACKED
                               - GIT COMMIT -m " " THIS COMMITS OUR FILES AND LETS US SAY WHY AND WHAT WE ARE COMMITTING
                               - GIT PUSH (origin master) THIS ALLOWS US TO PUSH OUR FILES TO OUR MASTER
                               - CD = CHANGE DIRECTORY
                               - LS = GIVES US A LIST OF ITEMS/FILES THAT ARE STORED IN THAT PART OF THE SYSTEM                         
                               - CD SPACE DOT DOT(CD ..) ALLOWS US TO MOVE BACK




 }


 }
}
